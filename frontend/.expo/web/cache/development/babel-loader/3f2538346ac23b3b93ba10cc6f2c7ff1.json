{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useLocalObservable } from \"mobx-react-lite\";\n\nvar SessionContext = function SessionContext() {\n  var store = useLocalObservable(function () {\n    return {\n      cart: \"[]\",\n      cartProduct: [],\n      session: {\n        sessionID: \"none\"\n      },\n      cartActive: false,\n      setCart: function setCart(sessionId) {\n        this.cart = sessionId;\n      },\n      setCartProduct: function setCartProduct(productArr) {\n        this.cartProduct = productArr.concat();\n      },\n      setSession: function setSession(sessionId) {\n        this.session.sessionID = sessionId;\n      },\n      editCart: function editCart(productId, type) {\n        for (var _iterator = _createForOfIteratorHelperLoose(JSON.parse(this.cart)), _step; !(_step = _iterator()).done;) {\n          var map = _step.value;\n\n          if (Number(map[0]) === productId) {\n            if (type) {\n              this.addCart(productId);\n            } else {\n              if (Number(map[1]) > 1) this.removeCart(productId);\n            }\n\n            break;\n          }\n        }\n      },\n      addCart: function addCart(productId) {\n        fetch('http://localhost:8080/editCart/' + productId, {\n          method: 'POST',\n          mode: 'cors',\n          credentials: 'include'\n        });\n        var nCart = JSON.parse(this.cart);\n        var exists = false;\n\n        for (var _iterator2 = _createForOfIteratorHelperLoose(nCart), _step2; !(_step2 = _iterator2()).done;) {\n          var map = _step2.value;\n\n          if (Number(map[0]) === productId) {\n            map[1]++;\n            exists = true;\n            break;\n          }\n        }\n\n        if (!exists) {\n          nCart.push([String(productId), 1]);\n          this.getCart();\n        }\n\n        this.setCart(JSON.stringify(nCart));\n      },\n      removeCart: function removeCart(productId) {\n        fetch('http://localhost:8080/removeCart/' + productId, {\n          method: 'POST',\n          mode: 'cors',\n          credentials: 'include'\n        });\n        var nCart = JSON.parse(this.cart);\n        var exists = false;\n\n        for (var _iterator3 = _createForOfIteratorHelperLoose(nCart), _step3; !(_step3 = _iterator3()).done;) {\n          var map = _step3.value;\n\n          if (Number(map[0]) === productId) {\n            map[1]--;\n            exists = true;\n            break;\n          }\n        }\n\n        if (!exists) {\n          this.getCart();\n        } else {\n          this.setCart(JSON.stringify(nCart));\n        }\n      },\n      deleteCart: function deleteCart(productId) {\n        fetch('http://localhost:8080/deleteCart/' + productId, {\n          method: 'POST',\n          mode: 'cors',\n          credentials: 'include'\n        });\n        this.getCart();\n      },\n      setCartActive: function setCartActive(active) {\n        if (active) this.getCart();\n        this.cartActive = active;\n      },\n      getCart: function getCart() {\n        var _this = this;\n\n        var getAPI = function getAPI() {\n          var response, data;\n          return _regeneratorRuntime.async(function getAPI$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/getCart\", {\n                    method: 'GET',\n                    mode: 'cors',\n                    credentials: 'include'\n                  }));\n\n                case 2:\n                  response = _context.sent;\n                  _context.next = 5;\n                  return _regeneratorRuntime.awrap(response.json());\n\n                case 5:\n                  data = _context.sent;\n                  console.log(data);\n\n                  try {\n                    _this.setCart(data[0]);\n\n                    _this.setCartProduct(data[1]);\n                  } catch (error) {\n                    console.log(error);\n                  }\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        };\n\n        getAPI();\n      },\n      updateCart: function updateCart() {\n        fetch('http://localhost:8080/updateCart/' + this.cart, {\n          method: 'POST',\n          mode: 'cors',\n          credentials: 'include'\n        });\n      },\n      productCount: function productCount(productId) {\n        for (var _iterator4 = _createForOfIteratorHelperLoose(JSON.parse(this.cart)), _step4; !(_step4 = _iterator4()).done;) {\n          var map = _step4.value;\n\n          if (Number(map[0]) === productId) {\n            return Number(map[1]);\n          }\n        }\n\n        return 0;\n      },\n\n      get cartTotalPrice() {\n        var sum = 0;\n        var nCart = JSON.parse(this.cart);\n\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.cartProduct), _step5; !(_step5 = _iterator5()).done;) {\n          var product = _step5.value;\n\n          for (var _iterator6 = _createForOfIteratorHelperLoose(nCart), _step6; !(_step6 = _iterator6()).done;) {\n            var map = _step6.value;\n\n            if (Number(map[0]) === Number(product.id)) {\n              sum += product.price * Number(map[1]);\n              break;\n            }\n          }\n        }\n\n        return sum;\n      }\n\n    };\n  });\n  return store;\n};\n\nexport default SessionContext;","map":{"version":3,"sources":["/Users/heleneelling/Documents/Universitetet/Semester5/WebUtvikling/prosjekt-4/frontend/contexts/session-context.tsx"],"names":["useLocalObservable","SessionContext","store","cart","cartProduct","session","sessionID","cartActive","setCart","sessionId","setCartProduct","productArr","concat","setSession","editCart","productId","type","JSON","parse","map","Number","addCart","removeCart","fetch","method","mode","credentials","nCart","exists","push","String","getCart","stringify","deleteCart","setCartActive","active","getAPI","response","json","data","console","log","error","updateCart","productCount","cartTotalPrice","sum","product","id","price"],"mappings":"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","sourcesContent":["import Product from \"../models/product\"\nimport { useLocalObservable } from \"mobx-react-lite\";\n\nconst SessionContext = () => {\n\tconst store = useLocalObservable(() => ({\n\t\tcart: \"[]\",\n\t\tcartProduct: [],\n\t\tsession: { sessionID: \"none\" },\n\t\tcartActive: false,\n\t\tsetCart(sessionId: string) {\n\t\t\tthis.cart = sessionId;\n\t\t},\n\t\tsetCartProduct(productArr: Product[]) {\n\t\t\tthis.cartProduct = productArr.concat();\n\t\t},\n\t\tsetSession(sessionId: string) {\n\t\t\tthis.session.sessionID = sessionId;\n\t\t},\n\t\teditCart(productId: number, type: boolean) {\n\t\t\tfor (const map of JSON.parse(this.cart)) {\n\t\t\t\tif (Number(map[0]) === productId) {\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tthis.addCart(productId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (Number(map[1]) > 1) this.removeCart(productId);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\taddCart(productId: number) {\n\t\t\tfetch('http://localhost:8080/editCart/'+productId,{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'include',\n\t\t\t})\n\t\t\tconst nCart = JSON.parse(this.cart);\n\t\t\tlet exists: boolean = false;\n\t\t\tfor (const map of nCart) {\n\t\t\t\tif (Number(map[0]) === productId) {\n\t\t\t\t\tmap[1]++;\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!exists) {\n\t\t\t\tnCart.push([String(productId),1]);\n\t\t\t\tthis.getCart();\n\t\t\t}\n\t\t\tthis.setCart(JSON.stringify(nCart));\n\t\t},\n\t\tremoveCart(productId: number) {\n\t\t\tfetch('http://localhost:8080/removeCart/'+productId,{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'include',\n\t\t\t})\n\t\t\tconst nCart = JSON.parse(this.cart);\n\t\t\tlet exists: boolean = false;\n\t\t\tfor (const map of nCart) {\n\t\t\t\tif (Number(map[0]) === productId) {\n\t\t\t\t\tmap[1]--;\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!exists) {\n\t\t\t\tthis.getCart();\n\t\t\t} else {\n\t\t\t\tthis.setCart(JSON.stringify(nCart));\n\t\t\t}\n\t\t},\n\t\tdeleteCart(productId: number) {\n\t\t\tfetch('http://localhost:8080/deleteCart/'+productId,{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'include',\n\t\t\t})\n\t\t\tthis.getCart();\n\t\t},\n\t\tsetCartActive(active: boolean) {\n\t\t\tif (active) this.getCart();\n\t\t\tthis.cartActive = active;\n\t\t},\n\t\tgetCart() {\n\t\t\tconst getAPI = async () => {\n\t\t\t\tconst response = await fetch(\"http://localhost:8080/getCart\",{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\tmode: 'cors',\n\t\t\t\t\tcredentials: 'include',\n\t\t\t\t});\n\t\t\t\tconst data = await response.json();\n\t\t\t\tconsole.log(data);\n\t\t\t\ttry {\n\t\t\t\t\tthis.setCart(data[0]);\n\t\t\t\t\tthis.setCartProduct(data[1]);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetAPI();\n\t\t},\n\t\tupdateCart() {\n\t\t\tfetch('http://localhost:8080/updateCart/'+this.cart,{\n\t\t\t\tmethod: 'POST',\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'include',\n\t\t\t})\n\t\t},\n\t\tproductCount(productId: number) {\n\t\t\tfor (const map of JSON.parse(this.cart)) {\n\t\t\t\tif (Number(map[0]) === productId) {\n\t\t\t\t\treturn Number(map[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\t\tget cartTotalPrice() {\n\t\t\tlet sum = 0;\n\t\t\tconst nCart = JSON.parse(this.cart);\n\t\t\tfor (const product of this.cartProduct) {\n\t\t\t\tfor (const map of nCart) {\n\t\t\t\t\tif (Number(map[0]) === Number(product.id)) {\n\t\t\t\t\t\tsum += product.price*Number(map[1]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t}));\n\treturn store;\n};\nexport default SessionContext;\n"]},"metadata":{},"sourceType":"module"}