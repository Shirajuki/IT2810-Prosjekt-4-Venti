{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useLocalObservable } from \"mobx-react-lite\";\n\nvar ReviewContext = function ReviewContext() {\n  var store = useLocalObservable(function () {\n    return {\n      reviews: [],\n      session: {\n        sessionID: \"none\"\n      },\n      setReviews: function setReviews(reviews) {\n        this.reviews = reviews.concat();\n      },\n      setSession: function setSession(sessionId) {\n        this.session.sessionID = sessionId;\n      },\n\n      get sessionId() {\n        return this.session.sessionID;\n      },\n\n      postReviews: function postReviews(productId, reviewText, rndName, stars) {\n        var _this = this;\n\n        var getAPI;\n        return _regeneratorRuntime.async(function postReviews$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.sessionId && rndName && reviewText && productId && stars)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                getAPI = function getAPI() {\n                  var url;\n                  return _regeneratorRuntime.async(function getAPI$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          url = \"http://localhost:8080/post-review/?productId=\" + productId + \"&sessionId=\" + _this.sessionId + \"&name=\" + rndName + \"&reviewText=\" + reviewText + \"&stars=\" + stars;\n                          _context.next = 3;\n                          return _regeneratorRuntime.awrap(fetch(url, {\n                            method: 'POST',\n                            mode: 'cors',\n                            credentials: 'include'\n                          }));\n\n                        case 3:\n                          _context.prev = 3;\n\n                          _this.getReviews(productId);\n\n                          return _context.abrupt(\"return\", true);\n\n                        case 8:\n                          _context.prev = 8;\n                          _context.t0 = _context[\"catch\"](3);\n                          return _context.abrupt(\"return\", false);\n\n                        case 11:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, null, null, [[3, 8]], Promise);\n                };\n\n                _context2.next = 4;\n                return _regeneratorRuntime.awrap(getAPI());\n\n              case 4:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 5:\n                return _context2.abrupt(\"return\", false);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      },\n      getReviews: function getReviews(productId) {\n        var _this2 = this;\n\n        var getAPI = function getAPI() {\n          var response, data;\n          return _regeneratorRuntime.async(function getAPI$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/reviews/\" + productId, {\n                    method: 'GET',\n                    mode: 'cors',\n                    credentials: 'include'\n                  }));\n\n                case 2:\n                  response = _context3.sent;\n                  _context3.next = 5;\n                  return _regeneratorRuntime.awrap(response.json());\n\n                case 5:\n                  data = _context3.sent;\n\n                  try {\n                    _this2.setReviews(data);\n                  } catch (error) {\n                    console.log(error);\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        };\n\n        getAPI();\n      }\n    };\n  });\n  return store;\n};\n\nexport default ReviewContext;","map":{"version":3,"sources":["/Users/heleneelling/Documents/Universitetet/Semester5/WebUtvikling/prosjekt-4/frontend/contexts/review-context.tsx"],"names":["useLocalObservable","ReviewContext","store","reviews","session","sessionID","setReviews","concat","setSession","sessionId","postReviews","productId","reviewText","rndName","stars","getAPI","url","fetch","method","mode","credentials","getReviews","response","json","data","error","console","log"],"mappings":";AACA,SAASA,kBAAT,QAAmC,iBAAnC;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC3B,MAAMC,KAAK,GAAGF,kBAAkB,CAAC;AAAA,WAAO;AACvCG,MAAAA,OAAO,EAAE,EAD8B;AAEvCC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAF8B;AAGvCC,MAAAA,UAHuC,sBAG5BH,OAH4B,EAGT;AAC7B,aAAKA,OAAL,GAAeA,OAAO,CAACI,MAAR,EAAf;AACA,OALsC;AAMvCC,MAAAA,UANuC,sBAM5BC,SAN4B,EAMT;AAC7B,aAAKL,OAAL,CAAaC,SAAb,GAAyBI,SAAzB;AACA,OARsC;;AASvC,UAAIA,SAAJ,GAAgB;AACf,eAAO,KAAKL,OAAL,CAAaC,SAApB;AACA,OAXsC;;AAYjCK,MAAAA,WAZiC,uBAYrBC,SAZqB,EAYFC,UAZE,EAYkBC,OAZlB,EAYmCC,KAZnC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAalC,KAAKL,SAAL,IAAkBI,OAAlB,IAA6BD,UAA7B,IAA2CD,SAA3C,IAAwDG,KAbtB;AAAA;AAAA;AAAA;;AAc/BC,gBAAAA,MAd+B,GActB,SAATA,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,0BAAAA,GADQ,qDACsDL,SADtD,mBAC6E,KAAI,CAACF,SADlF,cACoGI,OADpG,oBAC0HD,UAD1H,eAC8IE,KAD9I;AAAA;AAAA,2DAERG,KAAK,CAACD,GAAD,EAAK;AACfE,4BAAAA,MAAM,EAAE,MADO;AAEfC,4BAAAA,IAAI,EAAE,MAFS;AAGfC,4BAAAA,WAAW,EAAE;AAHE,2BAAL,CAFG;;AAAA;AAAA;;AAQb,0BAAA,KAAI,CAACC,UAAL,CAAgBV,SAAhB;;AARa,2DASN,IATM;;AAAA;AAAA;AAAA;AAAA,2DAWN,KAXM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAdsB;;AAAA;AAAA,iDA4BxBI,MAAM,EA5BkB;;AAAA;AAAA;;AAAA;AAAA,kDA8B/B,KA9B+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCvCM,MAAAA,UAhCuC,sBAgC5BV,SAhC4B,EAgCT;AAAA;;AAC7B,YAAMI,MAAM,GAAG,SAATA,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACSE,KAAK,oCAAkCN,SAAlC,EAA8C;AACzEO,oBAAAA,MAAM,EAAE,KADiE;AAEzEC,oBAAAA,IAAI,EAAE,MAFmE;AAGzEC,oBAAAA,WAAW,EAAE;AAH4D,mBAA9C,CADd;;AAAA;AACRE,kBAAAA,QADQ;AAAA;AAAA,mDAMKA,QAAQ,CAACC,IAAT,EANL;;AAAA;AAMRC,kBAAAA,IANQ;;AAOd,sBAAI;AACH,oBAAA,MAAI,CAAClB,UAAL,CAAgBkB,IAAhB;AACA,mBAFD,CAEE,OAAOC,KAAP,EAAc;AACfC,oBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;;AAXa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAaAV,QAAAA,MAAM;AACN;AA/CsC,KAAP;AAAA,GAAD,CAAhC;AAiDA,SAAOb,KAAP;AACA,CAnDD;;AAoDA,eAAeD,aAAf","sourcesContent":["import Review from \"../models/review\"\nimport { useLocalObservable } from \"mobx-react-lite\";\n\nconst ReviewContext = () => {\n\tconst store = useLocalObservable(() => ({\n\t\treviews: [],\n\t\tsession: { sessionID: \"none\" },\n\t\tsetReviews(reviews: Review[]) {\n\t\t\tthis.reviews = reviews.concat();\n\t\t},\n\t\tsetSession(sessionId: string) {\n\t\t\tthis.session.sessionID = sessionId;\n\t\t},\n\t\tget sessionId() {\n\t\t\treturn this.session.sessionID;\n\t\t},\n\t\tasync postReviews(productId: string, reviewText: string, rndName: string, stars: number) {\n\t\t\tif (this.sessionId && rndName && reviewText && productId && stars) {\n\t\t\t\tconst getAPI = async () => {\n\t\t\t\t\tconst url: string = `http://localhost:8080/post-review/?productId=${productId}&sessionId=${this.sessionId}&name=${rndName}&reviewText=${reviewText}&stars=${stars}`;\n\t\t\t\t\tawait fetch(url,{\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tmode: 'cors',\n\t\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\t})\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.getReviews(productId);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn await getAPI();\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tgetReviews(productId: string) {\n\t\t\tconst getAPI = async () => {\n\t\t\t\tconst response = await fetch(`http://localhost:8080/reviews/${productId}`,{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\tmode: 'cors',\n\t\t\t\t\tcredentials: 'include',\n\t\t\t\t});\n\t\t\t\tconst data = await response.json();\n\t\t\t\ttry {\n\t\t\t\t\tthis.setReviews(data);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}\n\t\t\t};\n\t\t\tgetAPI();\n\t\t}\n\t}));\n\treturn store;\n};\nexport default ReviewContext;\n"]},"metadata":{},"sourceType":"module"}