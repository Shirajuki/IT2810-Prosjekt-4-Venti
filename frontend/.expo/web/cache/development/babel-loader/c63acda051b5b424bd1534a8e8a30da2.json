{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useLocalObservable } from \"mobx-react-lite\";\n\nvar FetchContext = function FetchContext() {\n  var store = useLocalObservable(function () {\n    return {\n      hidden: true,\n      currentPage: 0,\n      pageSize: 15,\n      pageCount: 0,\n      productsCount: 0,\n      products: [],\n      filterTerm: [],\n      setHidden: function setHidden(hidden) {\n        this.hidden = hidden;\n      },\n      setCurrentPage: function setCurrentPage(pageNumber) {\n        this.currentPage = pageNumber;\n      },\n      setPageCount: function setPageCount(pageCount) {\n        this.pageCount = pageCount;\n      },\n      setProductsCount: function setProductsCount(productCount) {\n        this.productsCount = productCount;\n      },\n      setProducts: function setProducts(productArr) {\n        this.products = productArr.concat();\n      },\n      setFilterTerm: function setFilterTerm(filterTerms) {\n        this.filterTerm = filterTerms.concat();\n      },\n      search: function search(sortRefVal, searchRefVal) {\n        if (this.hidden) {\n          this.setHidden(false);\n        } else {\n          this.getAPI(sortRefVal, searchRefVal);\n        }\n      },\n      addOrRemoveFilter: function addOrRemoveFilter(item) {\n        var pos = this.filterTerm.indexOf(item);\n        var newList = this.filterTerm.concat();\n\n        if (pos < 0) {\n          newList.push(item);\n        } else {\n          newList.splice(pos, 1);\n        }\n\n        this.setFilterTerm(newList);\n      },\n      getAPI: function getAPI(sortRefVal, searchRefVal) {\n        var _this = this;\n\n        var url, response, countProducts, data;\n        return _regeneratorRuntime.async(function getAPI$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = \"http://localhost:8080/?pageOffset=\" + this.currentPage + \"&pageSize=\" + this.pageSize + \"&sortTerm=\" + sortRefVal;\n                if (this.filterTerm.length > 0) url += \"&filterTerm=\" + JSON.stringify(this.filterTerm);\n                if (searchRefVal) url += \"&searchTerm=\" + searchRefVal;\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(fetch(url, {\n                  method: 'GET',\n                  mode: 'cors',\n                  credentials: 'include'\n                }));\n\n              case 5:\n                response = _context2.sent;\n\n                countProducts = function countProducts() {\n                  var response, _await$response$json, _await$response$json$, count;\n\n                  return _regeneratorRuntime.async(function countProducts$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _regeneratorRuntime.awrap(fetch(url + \"&count=true\"));\n\n                        case 2:\n                          response = _context.sent;\n                          _context.next = 5;\n                          return _regeneratorRuntime.awrap(response.json());\n\n                        case 5:\n                          _await$response$json = _context.sent;\n                          _await$response$json$ = _await$response$json.count;\n                          count = _await$response$json$ === void 0 ? 0 : _await$response$json$;\n\n                          _this.setProductsCount(count);\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                };\n\n                _context2.next = 9;\n                return _regeneratorRuntime.awrap(response.json());\n\n              case 9:\n                data = _context2.sent;\n                countProducts();\n\n                try {\n                  this.setProducts(data);\n                } catch (error) {\n                  console.log(error);\n                }\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, this, null, Promise);\n      }\n    };\n  });\n  return store;\n};\n\nexport default FetchContext;","map":{"version":3,"sources":["/Users/heleneelling/Documents/Universitetet/Semester5/WebUtvikling/prosjekt-4/frontend/contexts/fetch-context.tsx"],"names":["useLocalObservable","FetchContext","store","hidden","currentPage","pageSize","pageCount","productsCount","products","filterTerm","setHidden","setCurrentPage","pageNumber","setPageCount","setProductsCount","productCount","setProducts","productArr","concat","setFilterTerm","filterTerms","search","sortRefVal","searchRefVal","getAPI","addOrRemoveFilter","item","pos","indexOf","newList","push","splice","url","length","JSON","stringify","fetch","method","mode","credentials","response","countProducts","json","count","data","error","console","log"],"mappings":"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","sourcesContent":["import Product from \"../models/product\"\nimport { useLocalObservable } from \"mobx-react-lite\";\n\nconst FetchContext = () => {\n\tconst store = useLocalObservable(() => ({\n\t\thidden: true,\n\t\tcurrentPage: 0,\n\t\tpageSize: 15,\n\t\tpageCount: 0,\n\t\tproductsCount: 0,\n\t\tproducts: [],\n\t\tfilterTerm: [],\n\t\tsetHidden(hidden: boolean) {\n\t\t\tthis.hidden = hidden;\n\t\t},\n\t\tsetCurrentPage(pageNumber: number) {\n\t\t\tthis.currentPage = pageNumber;\n\t\t},\n\t\tsetPageCount(pageCount: number) {\n\t\t\tthis.pageCount = pageCount;\n\t\t},\n\t\tsetProductsCount(productCount: number) {\n\t\t\tthis.productsCount = productCount;\n\t\t},\n\t\tsetProducts(productArr: Product[]) {\n\t\t\tthis.products = productArr.concat();\n\t\t},\n\t\tsetFilterTerm(filterTerms: String[]) {\n\t\t\tthis.filterTerm = filterTerms.concat();\n\t\t},\n\t\tsearch(sortRefVal: string, searchRefVal: string) {\n\t\t\tif (this.hidden) {\n\t\t\t\tthis.setHidden(false);\n\t\t\t} else {\n\t\t\t\tthis.getAPI(sortRefVal, searchRefVal);\n\t\t\t}\n\t\t},\n\t\taddOrRemoveFilter(item: String) {\n\t\t\tconst pos = this.filterTerm.indexOf(item);\n\t\t\tconst newList = this.filterTerm.concat();\n\t\t\tif (pos < 0 ) {\n\t\t\t\tnewList.push(item);\n\t\t\t} else {\n\t\t\t\tnewList.splice(pos,1);\n\t\t\t}\n\t\t\tthis.setFilterTerm(newList);\n\t\t},\n\t\tasync getAPI(sortRefVal: string, searchRefVal: string) {\n\t\t\tlet url: string = `http://localhost:8080/?pageOffset=${this.currentPage}&pageSize=${this.pageSize}&sortTerm=${sortRefVal}`;\n\t\t\tif (this.filterTerm.length > 0) url += `&filterTerm=${JSON.stringify(this.filterTerm)}`;\n\t\t\tif (searchRefVal) url += `&searchTerm=${searchRefVal}`;\n\t\t\tconst response = await fetch(url,{\n\t\t\t\tmethod: 'GET',\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'include', // Don't forget to specify this if you need cookies\n\t\t\t});\n\t\t\tconst countProducts = async () => {\n\t\t\t\tconst response = await fetch(url+\"&count=true\");\n\t\t\t\tconst {count = 0} = await response.json()\n\t\t\t\tthis.setProductsCount(count)\n\t\t\t}\n\t\t\tconst data = await response.json();\n\t\t\tcountProducts()\n\t\t\ttry {\n\t\t\t\tthis.setProducts(data);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}\n\t}));\n\treturn store;\n};\nexport default FetchContext;\n"]},"metadata":{},"sourceType":"module"}